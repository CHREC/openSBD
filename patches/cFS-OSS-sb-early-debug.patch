diff --git a/cfe/fsw/cfe-core/src/sb/cfe_sb_init.c b/cfe/fsw/cfe-core/src/sb/cfe_sb_init.c
index f3309c2..b10b063 100644

# Copyright (c) 2018 NSF Center for Space, High-performance, and Resilient Computing (SHREC)
# University of Pittsburgh. All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are permitted provided
# that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.
--- a/cfe/fsw/cfe-core/src/sb/cfe_sb_init.c
+++ b/cfe/fsw/cfe-core/src/sb/cfe_sb_init.c
@@ -101,6 +101,15 @@ uint32 CFE_SB_MemPoolDefSize[CFE_ES_MAX_MEMPOOL_BLOCK_SIZES] =
 };
 
 
+#include <pthread.h>
+#include <errno.h>
+#include <string.h>
+void *sb_debug_thread(void *args)
+{
+  /* Perform SB debug operations here */
+  return NULL;
+}
+
 /******************************************************************************
 **  Function:  CFE_SB_EarlyInit()
 **
@@ -158,6 +167,17 @@ int32 CFE_SB_EarlyInit (void) {
 
    CFE_SB.ZeroCopyTail = NULL;
 
+#if 1
+   pthread_t th;
+   int ret = pthread_create(&th, NULL, sb_debug_thread, NULL);
+   if (ret != 0) {
+     printf("Unable to create debug thread: %s", strerror(errno));
+     exit(EXIT_FAILURE);
+   }
+   pthread_join(th, NULL);
+   exit(EXIT_SUCCESS);
+#endif
+
     return Stat;
 
 }/* end CFE_SB_EarlyInit */
